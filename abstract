#!/usr/bin/env node
const commandLineArgs = require('command-line-args');
const getUsage = require('command-line-usage');
const getStdin = require('get-stdin');
const fs = require('fs');
const md2html = require('./src/md2html.js');
const phantomjs = require('phantomjs-prebuilt')

const optsDef = [
	{name: "style", alias: "s", type: String},
	{name: "output", alias: "o", type: String},
	{name: "source", type: String, defaultOption: true},
	{name: "help", alias: "h", type: Boolean}
];

const opts = commandLineArgs(optsDef);

/** Usage Instructions */
const help = [
	{
		header: "Abstract",
		content: "Takes a µPad-flavoured Markdown file and turns it into a PDF file."
	},
	{
		header: "Usage",
		content: [
			'$ abstract [[bold]{--style} [underline]{style.css}] [[bold]{--output} [underline]{file.pdf}] [underline]{file.md}',
			'$ abstract [[bold]{--style} [underline]{style.css}] [[bold]{--output} [underline]{file.pdf}] [bold]{--source} [underline]{file.md}',
			'$ cat [underline]{file.md} | abstract [[bold]{--style} [underline]{style.css}] [[bold]{--output} [underline]{file.pdf}]'
		]
	},
	{
		header: 'Options',
		optionList: [
			{
				name: 'help',
				alias: 'h'
			},
			{
				name: 'style',
				alias: 's',
				typeLabel: '[underline]{style.css}',
				description: 'Apply a custom style to the PDF.'
			},
			{
				name: 'output',
				alias: 'o',
				typeLabel: '[underline]{file.pdf}',
				description: 'Filename for the outputted PDF file.'
			},
			{
				name: 'source',
				typeLabel: '[underline]{file.md}',
				description: 'The markdown file to convert.'
			}
		]
	}
];

const usage = getUsage(help);

/** Handle input and do conversion */
if (opts.help) return console.log(usage);

if (opts.source) {
	//Source file is a commnad line arg
	fs.readFile(opts.source, "utf8", (err, md) => {
		if (err) return console.log(err);

		processMd(md);
	});
} else {
	//Look at stdin
	getStdin().then(md => {
		processMd(md);
	});
}

function processMd(md) {
	console.log("Abstract: Powered by µPad (https://getmicropad.com). See licence at https://github.com/NickGeek/Abstract/blob/master/LICENSE.");
	console.log("Type abstract --help for usage");

	let pdfName = "output.pdf";
	if (opts.output) {
		pdfName = opts.output;
	} else if (opts.source) {
		pdfName = opts.source.replace(/.md$/, '.pdf');
	}
	console.log("Parsing "+(opts.source ? opts.source : "stdin")+" into "+pdfName+"...");

	fs.readFile((opts.style ? opts.style : __dirname+"/src/default.css"), "utf8", (err, css) => {
		if (err) return console.log(err);
		fs.readFile(__dirname+"/src/ASCIIsvg.js", "utf8", (err, js) => {
			if (err) return console.log(err);
			md2html.getHtml(md, css, js).then(html => {
				let tempFilename = Date.now()+".html";
				fs.writeFile(tempFilename, html, err => {
					if (err) return console.log(err);

					let instance = phantomjs.exec(__dirname+'/src/rasterize.js', tempFilename, pdfName, "A4");
					instance.stderr.pipe(process.stderr);
					instance.on('exit', code => {
						fs.unlink(tempFilename, err => {
							if (err) return console.log(err);
						});
					});
				});
			});
		});
	});
}
