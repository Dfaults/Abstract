#!/usr/bin/env node
const commandLineArgs = require('command-line-args');
const getUsage = require('command-line-usage');
const getStdin = require('get-stdin');
const fs = require('mz/fs');
const process = require('process');
const md2html = require('./src/md2html.js');
const phantomjs = require('phantomjs-prebuilt');
var isProcessing = false;

const optsDef = [
	{name: "style", alias: "s", type: String},
	{name: "output", alias: "o", type: String},
	{name: "watch", alias: "w", type: Boolean},
	{name: "fancy", alias: "f", type: Boolean},
	{name: "source", type: String, defaultOption: true},
	{name: "help", alias: "h", type: Boolean}
];

const opts = commandLineArgs(optsDef);

/** Usage Instructions */
const help = [
	{
		header: "Abstract",
		content: "Takes a µPad-flavoured Markdown file and turns it into a PDF file.\n\
		More information at https://github.com/NickGeek/abstract."
	},
	{
		header: "Usage",
		content: [
			'$ abstract [[bold]{--style} [underline]{style.css}] [[bold]{--output} [underline]{file.pdf}] [underline]{file.md}',
			'$ abstract [[bold]{--style} [underline]{style.css}] [[bold]{--output} [underline]{file.pdf}] [bold]{--source} [underline]{file.md}',
			'$ cat [underline]{file.md} | abstract [[bold]{--style} [underline]{style.css}] [[bold]{--output} [underline]{file.pdf}]'
		]
	},
	{
		header: 'Options',
		optionList: [
			{
				name: 'help',
				alias: 'h'
			},
			{
				name: 'watch',
				alias: 'w',
				description: 'Automatically update the PDF file.'
			},
			{
				name: 'fancy',
				alias: 'f',
				description: 'Download and use fancy fonts in the generation of the document'
			},
			{
				name: 'style',
				alias: 's',
				typeLabel: '[underline]{style.css}',
				description: 'Apply a custom style to the PDF.'
			},
			{
				name: 'output',
				alias: 'o',
				typeLabel: '[underline]{file.pdf}',
				description: 'Filename for the outputted PDF file.'
			},
			{
				name: 'source',
				typeLabel: '[underline]{file.md}',
				description: 'The markdown file to convert.'
			}
		]
	}
];

const usage = getUsage(help);

/** Handle input and do conversion */
if (opts.help) return console.log(usage);

console.log("Abstract: Powered by µPad (https://getmicropad.com). See licence at https://github.com/NickGeek/Abstract/blob/master/LICENSE.");
console.log("Type abstract --help for usage");

if (opts.fancy) {
	console.log("Downloading fonts from https://github.com/ickc/markdown-latex-css. See licence at https://github.com/ickc/markdown-latex-css/blob/master/LICENCE.");
	var extraHtml = '<link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/ickc/markdown-latex-css/fonts/fonts.min.css" />';
}

(opts.source
 // Source file is a command line Argo
 ? fs.readFile(opts.source, "utf8")
 // Look at stdin
 : getStdin())
	.then(processMd)
	.then(watcher)
	.catch(handleError);

async function processMd(md) {
	isProcessing = true;

	let pdfName =
		opts.output ? opts.output :
		opts.source ? opts.source.replace(/\.md$/, '.pdf') :
		"output.pdf";

	console.log(`Parsing ${opts.source ? opts.source : "stdin"} into ${pdfName}...`);

	let css = await fs.readFile((opts.style ? opts.style : __dirname+"/src/default.css"), "utf8");
	let js = await fs.readFile(__dirname+"/src/lib/ASCIIsvg.js", "utf8");
	let html = await md2html.getHtml(md, extraHtml, css, js);

	let tempFilename = Date.now()+".html";
	await fs.writeFile(tempFilename, html);

	let instance = phantomjs.exec(__dirname+'/src/lib/rasterize.js', tempFilename, pdfName, "A4");
	instance.stderr.pipe(process.stderr);
	await waitForPhantom(instance);

	await fs.unlink(tempFilename);
}

function waitForPhantom(process) {
	return new Promise((resolve, reject) => {
		process.on('exit', code => {
			isProcessing = false;
			if (code == 0) {
				resolve(code);
			} else {
				reject(`PhantomJS exited with non-zero exit code ${code}`);
			}
		});
	});
}

function watcher() {
	let watchFunction = function watchFunction() {
		fs.readFile(opts.source, "utf8")
		.then(function loop(md) {
			(isProcessing)
				? setTimeout(loop.bind(null, md), 1000) 
				: processMd(md);
		})
		.catch(handleError);
	};

	// If the user has defined watch, add an event handler to call this function again
	if (opts.source && opts.watch) {
		fs.watch(opts.source, watchFunction);
		if (opts.style) fs.watch(opts.style, watchFunction);
	}

}

function handleError(err) {
	console.log("An error occurred:");
	console.log(err);
	process.exit(1);
}
